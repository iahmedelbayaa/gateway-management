{
  "info": {
    "name": "Gateway Management API",
    "description": "Complete API collection for testing the Gateway Management System - Updated to match actual implementation",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "2.0.0"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "gatewayId",
      "value": "",
      "type": "string"
    },
    {
      "key": "deviceId",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Gateways",
      "item": [
        {
          "name": "Create Gateway",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"serial_number\": \"GW-{{$randomInt}}-{{$randomAlphaNumeric}}\",\n  \"name\": \"{{$randomCompanyName}} Gateway\",\n  \"ipv4_address\": \"192.168.{{$randomInt}}.{{$randomInt}}\",\n  \"status\": \"active\",\n  \"location\": \"{{$randomStreetName}}, Floor {{$randomInt}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/gateways",
              "host": ["{{baseUrl}}"],
              "path": ["gateways"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has gateway ID\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.collectionVariables.set('gatewayId', jsonData.id);",
                  "});",
                  "",
                  "pm.test(\"Response contains required fields\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('serial_number');",
                  "    pm.expect(jsonData).to.have.property('name');",
                  "    pm.expect(jsonData).to.have.property('ipv4_address');",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Gateways",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/gateways",
              "host": ["{{baseUrl}}"],
              "path": ["gateways"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Each gateway has devices array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    if (jsonData.length > 0) {",
                  "        pm.expect(jsonData[0]).to.have.property('devices');",
                  "        pm.expect(jsonData[0].devices).to.be.an('array');",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Gateway by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/gateways/{{gatewayId}}",
              "host": ["{{baseUrl}}"],
              "path": ["gateways", "{{gatewayId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains gateway details\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('devices');",
                  "    pm.expect(jsonData).to.have.property('logs');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Gateway",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated {{$randomCompanyName}} Gateway\",\n  \"location\": \"Updated {{$randomStreetName}}, Floor {{$randomInt}}\",\n  \"status\": \"inactive\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/gateways/{{gatewayId}}",
              "host": ["{{baseUrl}}"],
              "path": ["gateways", "{{gatewayId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Gateway was updated\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.name).to.contain('Updated');",
                  "    pm.expect(jsonData.status).to.eql('inactive');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Gateway",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/gateways/{{gatewayId}}",
              "host": ["{{baseUrl}}"],
              "path": ["gateways", "{{gatewayId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 204\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Devices",
      "item": [
        {
          "name": "Create Device",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"uid\": {{$randomInt}},\n  \"vendor\": \"{{$randomCompanyName}}\",\n  \"status\": \"online\",\n  \"device_type_id\": 1\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/devices",
              "host": ["{{baseUrl}}"],
              "path": ["devices"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has device ID\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.collectionVariables.set('deviceId', jsonData.id);",
                  "});",
                  "",
                  "pm.test(\"Device has required fields\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('uid');",
                  "    pm.expect(jsonData).to.have.property('vendor');",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Devices",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/devices",
              "host": ["{{baseUrl}}"],
              "path": ["devices"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Device by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/devices/{{deviceId}}",
              "host": ["{{baseUrl}}"],
              "path": ["devices", "{{deviceId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Device details returned\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('deviceType');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Device",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"vendor\": \"Updated {{$randomCompanyName}}\",\n  \"status\": \"maintenance\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/devices/{{deviceId}}",
              "host": ["{{baseUrl}}"],
              "path": ["devices", "{{deviceId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Device was updated\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.vendor).to.contain('Updated');",
                  "    pm.expect(jsonData.status).to.eql('maintenance');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Device",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/devices/{{deviceId}}",
              "host": ["{{baseUrl}}"],
              "path": ["devices", "{{deviceId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 204\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Device Assignment",
      "item": [
        {
          "name": "Attach Device to Gateway",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/gateways/{{gatewayId}}/devices/{{deviceId}}",
              "host": ["{{baseUrl}}"],
              "path": ["gateways", "{{gatewayId}}", "devices", "{{deviceId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Device is attached to gateway\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.devices).to.be.an('array');",
                  "    var deviceFound = jsonData.devices.some(device => device.id === pm.collectionVariables.get('deviceId'));",
                  "    pm.expect(deviceFound).to.be.true;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Remove Device from Gateway",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/gateways/{{gatewayId}}/devices/{{deviceId}}",
              "host": ["{{baseUrl}}"],
              "path": ["gateways", "{{gatewayId}}", "devices", "{{deviceId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Device is removed from gateway\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    var deviceFound = jsonData.devices.some(device => device.id === pm.collectionVariables.get('deviceId'));",
                  "    pm.expect(deviceFound).to.be.false;",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Error Cases",
      "item": [
        {
          "name": "Create Gateway - Duplicate Serial Number",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"serial_number\": \"DUPLICATE-SERIAL-123\",\n  \"name\": \"Test Gateway 1\",\n  \"ipv4_address\": \"192.168.1.100\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/gateways",
              "host": ["{{baseUrl}}"],
              "path": ["gateways"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"First creation should succeed\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Gateway - Duplicate Serial Number (Should Fail)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"serial_number\": \"DUPLICATE-SERIAL-123\",\n  \"name\": \"Test Gateway 2\",\n  \"ipv4_address\": \"192.168.1.101\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/gateways",
              "host": ["{{baseUrl}}"],
              "path": ["gateways"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 409\", function () {",
                  "    pm.response.to.have.status(409);",
                  "});",
                  "",
                  "pm.test(\"Error message mentions duplicate serial\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.contain('serial number');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Gateway - Invalid IP Address",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"serial_number\": \"VALID-SERIAL-456\",\n  \"name\": \"Test Gateway\",\n  \"ipv4_address\": \"invalid.ip.address\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/gateways",
              "host": ["{{baseUrl}}"],
              "path": ["gateways"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Error message mentions validation\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Non-existent Gateway",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/gateways/123e4567-e89b-12d3-a456-426614174999",
              "host": ["{{baseUrl}}"],
              "path": ["gateways", "123e4567-e89b-12d3-a456-426614174999"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Error message mentions not found\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.contain('not found');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Non-existent Device",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/devices/123e4567-e89b-12d3-a456-426614174999",
              "host": ["{{baseUrl}}"],
              "path": ["devices", "123e4567-e89b-12d3-a456-426614174999"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Error message mentions not found\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.contain('not found');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "API Documentation",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api",
          "host": ["{{baseUrl}}"],
          "path": ["api"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Swagger UI is served\", function () {",
              "    pm.expect(pm.response.text()).to.contain('swagger-ui');",
              "});"
            ]
          }
        }
      ]
    }
  ]
}
